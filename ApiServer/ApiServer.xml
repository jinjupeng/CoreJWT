<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApiServer</name>
    </assembly>
    <members>
        <member name="T:ApiServer.Controllers.AuthController">
            <summary>
            
            </summary>
        </member>
        <member name="M:ApiServer.Controllers.AuthController.CheckAccount(System.String,System.String,System.String@)">
            <summary>
            模拟登陆校验，因为是模拟，所以逻辑很‘模拟’
            </summary>
            <param name="userName"></param>
            <param name="pwd"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.BlogController.List(System.String,System.String)">
            <summary>
            我的所有文章首页
            </summary>
            <param name="author">用户名</param>
            <param name="keyword">关键词</param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Controllers.ExceptionController">
            <summary>
            异常
            </summary>
        </member>
        <member name="M:ApiServer.Controllers.ExceptionController.#ctor(Microsoft.Extensions.Logging.ILogger{ApiServer.Controllers.ExceptionController})">
            <summary>
            构造函数
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:ApiServer.Controllers.SysApiController.Tree(System.String,System.Boolean)">
            <summary>
            接口管理:查询
            </summary>
            <param name="apiNameLike"></param>
            <param name="apiStatus"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysApiController.Add(ApiServer.Model.Entity.Sys_Api)">
            <summary>
            接口管理:新增
            </summary>
            <param name="sys_Api"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysApiController.Update(ApiServer.Model.Entity.Sys_Api)">
            <summary>
            接口管理:修改
            </summary>
            <param name="sys_Api"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysApiController.Delete(ApiServer.Model.Entity.Sys_Api)">
            <summary>
            接口管理:删除
            </summary>
            <param name="sys_Api"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysApiController.CheckedTree(System.Int64)">
            <summary>
            角色管理：API树展示（勾选项、展开项）
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysApiController.SaveKeys(ApiServer.Model.Model.RoleCheckedIds)">
            <summary>
            角色管理：保存API权限勾选结果
            </summary>
            <param name="roleCheckedIds"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysApiController.Update(System.Int64,System.Boolean)">
            <summary>
            接口管理：更新接口禁用状态
            </summary>
            <param name="apiId"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Controllers.SysDictController">
            <summary>
            系统数据字典配置控制层代码
            </summary>
        </member>
        <member name="M:ApiServer.Controllers.SysDictController.All">
            <summary>
            查询所有
            </summary>
            <returns>所有数据字典项</returns>
        </member>
        <member name="M:ApiServer.Controllers.SysDictController.Query(System.String,System.String)">
            <summary>
            根据查询参数查询数据字典
            </summary>
            <param name="groupName">分组名称</param>
            <param name="groupCode">分组编码</param>
            <returns>数据字典项列表</returns>
        </member>
        <member name="M:ApiServer.Controllers.SysDictController.Update(ApiServer.Model.Entity.Sys_Dict)">
            <summary>
            根据id更新数据数据字典项目
            </summary>
            <param name="sys_Dict">更新实体（必须包含id）</param>
            <returns>更新成功结果</returns>
        </member>
        <member name="M:ApiServer.Controllers.SysDictController.Add(ApiServer.Model.Entity.Sys_Dict)">
            <summary>
            新增数据字典项
            </summary>
            <param name="sys_Dict">新增实体</param>
            <returns>更新成功结果</returns>
        </member>
        <member name="M:ApiServer.Controllers.SysDictController.Delete(System.Int64)">
            <summary>
            根据id删除数据字典项
            </summary>
            <param name="id">删除项id</param>
            <returns>删除成功结果</returns>
        </member>
        <member name="T:ApiServer.Controllers.SysMenuController">
            <summary>
            菜单管理
            </summary>
        </member>
        <member name="M:ApiServer.Controllers.SysMenuController.#ctor(ApiServer.BLL.IBLL.ISysMenuService)">
            <summary>
            
            </summary>
            <param name="sysMenuService"></param>
        </member>
        <member name="M:ApiServer.Controllers.SysMenuController.Tree(System.String,System.Boolean)">
            <summary>
            菜单管理：查询
            </summary>
            <param name="menuNameLike"></param>
            <param name="menuStatus"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysMenuController.Update(ApiServer.Model.Entity.Sys_Menu)">
            <summary>
            菜单管理：修改
            </summary>
            <param name="sys_Menu"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysMenuController.Add(ApiServer.Model.Entity.Sys_Menu)">
            <summary>
            菜单管理：新增
            </summary>
            <param name="sys_Menu"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysMenuController.Delete(ApiServer.Model.Entity.Sys_Menu)">
            <summary>
            菜单管理：新增
            </summary>
            <param name="sys_Menu"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysMenuController.CheckedTree(System.Int64)">
            <summary>
            角色管理:菜单树展示（勾选项、展开项）
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysMenuController.SaveKeys(ApiServer.Model.Model.RoleCheckedIds)">
            <summary>
            角色管理：保存菜单勾选结果
            </summary>
            <param name="roleCheckedIds"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysMenuController.UserTree(System.String)">
            <summary>
            系统左侧菜单栏加载，根据登录用户名加载它可以访问的菜单项
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysMenuController.Update(System.Int64,System.Boolean)">
            <summary>
            菜单管理：更新菜单禁用状态
            </summary>
            <param name="menuId"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysRoleController.Query(System.String)">
            <summary>
            角色管理:查询
            </summary>
            <param name="roleLike"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysRoleController.Update(ApiServer.Model.Entity.Sys_Role)">
            <summary>
            角色管理：修改
            </summary>
            <param name="sys_Role"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysRoleController.Add(ApiServer.Model.Entity.Sys_Role)">
            <summary>
            角色管理：新增
            </summary>
            <param name="sys_Role"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysRoleController.CheckedRoles(System.Int64)">
            <summary>
            用户管理：为用户分配角色，展示角色列表及勾选角色列表
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysRoleController.Savekeys(ApiServer.Model.Model.UserRoleCheckedIds)">
            <summary>
            用户管理：保存用户角色
            </summary>
            <param name="userRoleCheckedIds"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Controllers.SysRoleController.Update(System.Int64,System.Boolean)">
            <summary>
            角色管理：更新角色禁用状态
            </summary>
            <param name="roleId"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Exception.GlobalExceptionFilter">
            <summary>
            自定义全局异常过滤器：当程序发生异常时，处理系统出现的未捕获的异常
            自定义一个全局异常过滤器需要实现IExceptionFilter接口
            </summary>
        </member>
        <member name="M:ApiServer.Exception.GlobalExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{ApiServer.Exception.GlobalExceptionFilter},Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造函数
            </summary>
            <param name="logger"></param>
            <param name="env"></param>
        </member>
        <member name="M:ApiServer.Exception.GlobalExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            IExceptionFilter接口会要求实现OnException方法，当系统发生未捕获异常时就会触发这个方法。
            OnException方法有一个ExceptionContext异常上下文，其中包含了具体的异常信息，HttpContext及mvc路由信息。
            系统一旦出现未捕获异常后，比较常见的做法就是使用日志工具，将异常的详细信息记录下来，方便调试
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ApiServer.Exception.GlobalExceptionFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Exception.GlobalExceptionFilter.JsonErrorResponse">
            <summary>
            返回错误信息
            </summary>
        </member>
        <member name="P:ApiServer.Exception.GlobalExceptionFilter.JsonErrorResponse.Message">
            <summary>
            生产环境的消息
            </summary>
        </member>
        <member name="P:ApiServer.Exception.GlobalExceptionFilter.JsonErrorResponse.DevelopmentMessage">
            <summary>
            开发环境的消息
            </summary>
        </member>
        <member name="M:ApiServer.JWT.JwtHelper.IssueJwt(ApiServer.JWT.TokenModelJwt)">
            <summary>
            颁发JWT字符串
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.JWT.JwtHelper.SerializeJwt(System.String)">
            <summary>
            解析token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.JWT.TokenModelJwt">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:ApiServer.JWT.TokenModelJwt.Sid">
            <summary>
            Sid
            </summary>
        </member>
        <member name="P:ApiServer.JWT.TokenModelJwt.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:ApiServer.JWT.TokenModelJwt.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:ApiServer.JWT.PermissionHandler">
            <summary>
            权限授权处理器
            </summary>
        </member>
        <member name="T:ApiServer.JWT.PermissionItem">
            <summary>
            用户或角色或其他凭据实体
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionItem.Role">
            <summary>
            用户或角色或其他凭据名称
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionItem.Url">
            <summary>
            请求Url
            </summary>
        </member>
        <member name="T:ApiServer.JWT.PermissionRequirement">
            <summary>
            必要参数类，类似一个订单信息
            继承 IAuthorizationRequirement，用于设计自定义权限处理器PermissionHandler
            因为AuthorizationHandler 中的泛型参数 TRequirement 必须继承 IAuthorizationRequirement
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.Permissions">
            <summary>
            用户权限集合，一个订单包含了很多详情，
            同理，一个网站的认证发行中，也有很多权限详情(这里是Role和URL的关系)
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.LoginPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.Audience">
            <summary>
            订阅人
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:ApiServer.JWT.PermissionRequirement.SigningCredentials">
            <summary>
            签名验证
            </summary>
        </member>
        <member name="M:ApiServer.JWT.PermissionRequirement.#ctor(System.String,System.Collections.Generic.List{ApiServer.JWT.PermissionItem},System.String,System.String,System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.TimeSpan)">
            <summary>
            构造
            </summary>
            <param name="deniedAction">拒约请求的url</param>
            <param name="permissions">权限集合</param>
            <param name="claimType">声明类型</param>
            <param name="issuer">发行人</param>
            <param name="audience">订阅人</param>
            <param name="signingCredentials">签名验证实体</param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="P:ApiServer.JwtSettings.Issuer">
            <summary>
            证书颁发者
            </summary>
        </member>
        <member name="P:ApiServer.JwtSettings.Audience">
            <summary>
            允许使用的角色
            </summary>
        </member>
        <member name="P:ApiServer.JwtSettings.SecretKey">
            <summary>
            加密字符串
            </summary>
        </member>
        <member name="T:ApiServer.Middleware.ExceptionMiddleware">
            <summary>
            统一异常处理
            </summary>
        </member>
        <member name="M:ApiServer.Middleware.ExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
            <param name="environment"></param>
        </member>
        <member name="M:ApiServer.Middleware.ExceptionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            异常处理
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:ApiServer.Middleware.RefererMiddleware">
            <summary>
            对请求头Referer判断过滤
            </summary>
        </member>
        <member name="M:ApiServer.Middleware.RefererMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ApiServer.Middleware.RefererMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            对referer来源判断
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:ApiServer.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            自动注册
            </summary>
            <param name="builder"></param>
        </member>
    </members>
</doc>
